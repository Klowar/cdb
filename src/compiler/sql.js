/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,27],$V3=[1,24],$V4=[1,22],$V5=[1,28],$V6=[1,8],$V7=[1,20],$V8=[1,21],$V9=[1,23],$Va=[1,25],$Vb=[1,26],$Vc=[1,35],$Vd=[26,43,82,132,164,165,170,171,172,173,184],$Ve=[2,99],$Vf=[1,44],$Vg=[1,45],$Vh=[1,47],$Vi=[1,9,14,66,67,68,69,72,98,99,106,114,115],$Vj=[1,51],$Vk=[1,52],$Vl=[1,67],$Vm=[1,70],$Vn=[1,75],$Vo=[1,60],$Vp=[1,62],$Vq=[1,63],$Vr=[1,72],$Vs=[1,74],$Vt=[1,76],$Vu=[1,71],$Vv=[1,77],$Vw=[5,10,14,26,28,30,41,44,46,51,54,56,59,66,78,102,107,110,121,130,138,140,173],$Vx=[1,83],$Vy=[2,112],$Vz=[2,43],$VA=[1,92],$VB=[1,95],$VC=[30,101],$VD=[1,99],$VE=[1,97],$VF=[1,98],$VG=[1,100],$VH=[5,10,14,28,30,54,56,78,101,102,130,132,138,140,141,142,151,153,154,158,164,165,166],$VI=[2,177],$VJ=[5,10,14,28,30,54,56,78,101,102,130,132,138,140,141,142,151,153,154,156,158,164,165,166],$VK=[5,10,14,28,30,54,56,78,85,86,101,102,130,132,138,140,141,142,151,153,154,157,158,164,165,166],$VL=[5,10,14,28,30,41,44,46,54,56,78,101,102,130,132,138,140,141,142,151,153,154,156,158,164,165,166],$VM=[5,30,102],$VN=[1,111],$VO=[1,119],$VP=[1,120],$VQ=[5,14,30,54,56],$VR=[1,124],$VS=[1,125],$VT=[5,141,142],$VU=[2,135],$VV=[1,128],$VW=[1,129],$VX=[1,140],$VY=[5,14,28,54,56,78,130,138,140],$VZ=[1,141],$V_=[5,30,101],$V$=[1,149],$V01=[1,158],$V11=[5,14,56],$V21=[1,180],$V31=[1,176],$V41=[1,177],$V51=[1,178],$V61=[1,179],$V71=[1,182],$V81=[5,28,78,130],$V91=[1,187],$Va1=[1,188],$Vb1=[5,14,28,54,56,78,130,138,140,141,142],$Vc1=[28,141,142],$Vd1=[1,193],$Ve1=[1,192],$Vf1=[1,194],$Vg1=[1,195],$Vh1=[1,196],$Vi1=[1,199],$Vj1=[1,203],$Vk1=[28,30],$Vl1=[5,14,28,54,56,78,130,140],$Vm1=[5,14,28,30,54,56,78,102,107,130,138,140],$Vn1=[5,10,14,28,30,54,56,78,101,102,130,138,140,141,142,151,153,154,158,164,165],$Vo1=[30,58],$Vp1=[1,250],$Vq1=[1,254],$Vr1=[5,14,28,54,56,78,130],$Vs1=[1,273],$Vt1=[2,154],$Vu1=[1,282],$Vv1=[1,299],$Vw1=[1,300],$Vx1=[1,302],$Vy1=[1,301],$Vz1=[5,30],$VA1=[2,69],$VB1=[1,307],$VC1=[1,308],$VD1=[1,318],$VE1=[5,14,28,30,54,56,78,130,140],$VF1=[1,340],$VG1=[10,28,30,41,44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"sql_list":3,"sql":4,";":5,"schema":6,"cursor_def":7,"manipulative_statement":8,"WHENEVER":9,"NOT":10,"FOUND":11,"when_action":12,"SQLERROR":13,"CREATE":14,"SCHEMA":15,"AUTHORIZATION":16,"user":17,"opt_schema_element_list":18,"schema_element_list":19,"schema_element":20,"base_table_def":21,"view_def":22,"privilege_def":23,"TABLE":24,"table":25,"(":26,"base_table_element_commalist":27,")":28,"base_table_element":29,",":30,"column_def":31,"table_constraint_def":32,"column":33,"data_type":34,"column_def_opt_list":35,"column_def_opt":36,"NULLX":37,"UNIQUE":38,"PRIMARY":39,"KEY":40,"DEFAULT":41,"literal":42,"USER":43,"CHECK":44,"search_condition":45,"REFERENCES":46,"column_commalist":47,"FOREIGN":48,"VIEW":49,"opt_column_commalist":50,"AS":51,"query_spec":52,"opt_with_check_option":53,"WITH":54,"OPTION":55,"GRANT":56,"privileges":57,"ON":58,"TO":59,"grantee_commalist":60,"opt_with_grant_option":61,"ALL":62,"PRIVILEGES":63,"operation_commalist":64,"operation":65,"SELECT":66,"INSERT":67,"DELETE":68,"UPDATE":69,"grantee":70,"PUBLIC":71,"DECLARE":72,"cursor":73,"CURSOR":74,"FOR":75,"query_exp":76,"opt_order_by_clause":77,"ORDER":78,"BY":79,"ordering_spec_commalist":80,"ordering_spec":81,"INTNUM":82,"opt_asc_desc":83,"column_ref":84,"ASC":85,"DESC":86,"close_statement":87,"commit_statement":88,"delete_statement_positioned":89,"delete_statement_searched":90,"fetch_statement":91,"insert_statement":92,"open_statement":93,"rollback_statement":94,"select_statement":95,"update_statement_positioned":96,"update_statement_searched":97,"CLOSE":98,"COMMIT":99,"WORK":100,"FROM":101,"WHERE":102,"CURRENT":103,"OF":104,"opt_where_clause":105,"FETCH":106,"INTO":107,"target_commalist":108,"values_or_query_spec":109,"VALUES":110,"insert_atom_commalist":111,"insert_atom":112,"atom":113,"OPEN":114,"ROLLBACK":115,"opt_all_distinct":116,"selection":117,"table_exp":118,"from_clause":119,"DISTINCT":120,"SET":121,"assignment_commalist":122,"assignment":123,"=":124,"scalar_exp":125,"target":126,"parameter_ref":127,"where_clause":128,"query_term":129,"UNION":130,"scalar_exp_commalist":131,"*":132,"opt_group_by_clause":133,"opt_having_clause":134,"table_ref_commalist":135,"table_ref":136,"range_variable":137,"GROUP":138,"column_ref_commalist":139,"HAVING":140,"OR":141,"AND":142,"predicate":143,"comparison_predicate":144,"between_predicate":145,"like_predicate":146,"test_for_null":147,"in_predicate":148,"all_or_any_predicate":149,"existence_test":150,"COMPARISON":151,"subquery":152,"BETWEEN":153,"LIKE":154,"opt_escape":155,"ESCAPE":156,"IS":157,"IN":158,"atom_commalist":159,"any_all_some":160,"ANY":161,"SOME":162,"EXISTS":163,"+":164,"-":165,"/":166,"function_ref":167,"parameter":168,"INDICATOR":169,"AMMSC":170,"STRING":171,"APPROXNUM":172,"NAME":173,".":174,"CHARACTER":175,"NUMERIC":176,"DECIMAL":177,"INTEGER":178,"SMALLINT":179,"FLOAT":180,"REAL":181,"DOUBLE":182,"PRECISION":183,"PARAMETER":184,"GOTO":185,"CONTINUE":186,"$accept":0,"$end":1},
terminals_: {2:"error",5:";",9:"WHENEVER",10:"NOT",11:"FOUND",13:"SQLERROR",14:"CREATE",15:"SCHEMA",16:"AUTHORIZATION",24:"TABLE",26:"(",28:")",30:",",37:"NULLX",38:"UNIQUE",39:"PRIMARY",40:"KEY",41:"DEFAULT",43:"USER",44:"CHECK",46:"REFERENCES",48:"FOREIGN",49:"VIEW",51:"AS",54:"WITH",55:"OPTION",56:"GRANT",58:"ON",59:"TO",62:"ALL",63:"PRIVILEGES",66:"SELECT",67:"INSERT",68:"DELETE",69:"UPDATE",71:"PUBLIC",72:"DECLARE",74:"CURSOR",75:"FOR",78:"ORDER",79:"BY",82:"INTNUM",85:"ASC",86:"DESC",98:"CLOSE",99:"COMMIT",100:"WORK",101:"FROM",102:"WHERE",103:"CURRENT",104:"OF",106:"FETCH",107:"INTO",110:"VALUES",114:"OPEN",115:"ROLLBACK",120:"DISTINCT",121:"SET",124:"=",130:"UNION",132:"*",138:"GROUP",140:"HAVING",141:"OR",142:"AND",151:"COMPARISON",153:"BETWEEN",154:"LIKE",156:"ESCAPE",157:"IS",158:"IN",161:"ANY",162:"SOME",163:"EXISTS",164:"+",165:"-",166:"/",169:"INDICATOR",170:"AMMSC",171:"STRING",172:"APPROXNUM",173:"NAME",174:".",175:"CHARACTER",176:"NUMERIC",177:"DECIMAL",178:"INTEGER",179:"SMALLINT",180:"FLOAT",181:"REAL",182:"DOUBLE",183:"PRECISION",184:"PARAMETER",185:"GOTO",186:"CONTINUE"},
productions_: [0,[3,2],[3,3],[4,1],[4,1],[4,1],[4,4],[4,3],[6,5],[18,0],[18,1],[19,1],[19,2],[20,1],[20,1],[20,1],[21,6],[27,1],[27,3],[29,1],[29,1],[31,3],[35,0],[35,2],[36,2],[36,3],[36,4],[36,2],[36,2],[36,2],[36,4],[36,2],[36,5],[32,4],[32,5],[32,7],[32,10],[32,4],[47,1],[47,3],[22,7],[53,0],[53,3],[50,0],[50,3],[23,7],[61,0],[61,3],[57,2],[57,1],[57,1],[64,1],[64,3],[65,1],[65,1],[65,1],[65,2],[65,2],[60,1],[60,3],[70,1],[70,1],[7,6],[77,0],[77,3],[80,1],[80,3],[81,2],[81,2],[83,0],[83,1],[83,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[87,2],[88,2],[89,7],[90,4],[91,4],[92,5],[109,4],[109,1],[111,1],[111,3],[112,1],[112,1],[93,2],[94,2],[95,4],[95,7],[116,0],[116,1],[116,1],[96,8],[122,0],[122,1],[122,3],[123,3],[123,3],[97,5],[108,1],[108,3],[126,1],[105,0],[105,1],[76,1],[76,3],[76,4],[129,1],[129,3],[52,4],[117,1],[117,1],[118,4],[119,2],[135,1],[135,3],[136,1],[136,2],[128,2],[133,0],[133,3],[139,1],[139,3],[134,0],[134,2],[45,0],[45,3],[45,3],[45,2],[45,3],[45,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[144,3],[144,3],[145,6],[145,5],[146,5],[146,4],[155,0],[155,2],[147,4],[147,3],[148,6],[148,5],[148,6],[148,5],[159,1],[159,3],[149,4],[160,1],[160,1],[160,1],[150,2],[152,6],[125,3],[125,3],[125,3],[125,3],[125,2],[125,2],[125,1],[125,1],[125,1],[125,3],[131,1],[131,3],[113,1],[113,1],[113,1],[127,1],[127,2],[127,3],[167,4],[167,5],[167,5],[167,4],[42,1],[42,1],[42,1],[25,1],[25,3],[84,1],[84,3],[84,5],[34,1],[34,4],[34,1],[34,4],[34,6],[34,1],[34,4],[34,6],[34,1],[34,1],[34,1],[34,4],[34,1],[34,2],[33,1],[73,1],[168,1],[137,1],[17,1],[12,2],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 yy.scope.end_sql() 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1,66:$V2,67:$V3,68:$V4,69:$V5,72:$V6,87:9,88:10,89:11,90:12,91:13,92:14,93:15,94:16,95:17,96:18,97:19,98:$V7,99:$V8,106:$V9,114:$Va,115:$Vb},{1:[3],4:29,6:3,7:4,8:5,9:$V0,14:$V1,66:$V2,67:$V3,68:$V4,69:$V5,72:$V6,87:9,88:10,89:11,90:12,91:13,92:14,93:15,94:16,95:17,96:18,97:19,98:$V7,99:$V8,106:$V9,114:$Va,115:$Vb},{5:[1,30]},{5:[2,3]},{5:[2,4]},{5:[2,5]},{10:[1,31],13:[1,32]},{15:[1,33]},{73:34,173:$Vc},{5:[2,72]},{5:[2,73]},{5:[2,74]},{5:[2,75]},{5:[2,76]},{5:[2,77]},{5:[2,78]},{5:[2,79]},{5:[2,80]},{5:[2,81]},{5:[2,82]},{73:36,173:$Vc},{100:[1,37]},{101:[1,38]},{73:39,173:$Vc},{107:[1,40]},{73:41,173:$Vc},{100:[1,42]},o($Vd,$Ve,{116:43,62:$Vf,120:$Vg}),{25:46,173:$Vh},{5:[1,48]},o($Vi,[2,1]),{11:[1,49]},{12:50,185:$Vj,186:$Vk},{16:[1,53]},{74:[1,54]},o([5,74,107],[2,215]),{5:[2,83]},{5:[2,84]},{25:55,173:$Vh},{107:[1,56]},{25:57,173:$Vh},{5:[2,95]},{5:[2,96]},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,117:58,125:61,127:68,131:59,132:$Vo,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($Vd,[2,100]),o($Vd,[2,101]),{121:[1,78]},o($Vw,[2,195],{174:[1,79]}),o($Vi,[2,2]),{12:80,185:$Vj,186:$Vk},{5:[2,7]},{173:[1,81]},{5:[2,220]},{17:82,173:$Vx},{75:[1,84]},{5:$Vy,102:[1,85],105:86,128:87},{108:88,126:89,127:90,168:73,184:$Vv},o([66,110],$Vz,{50:91,26:$VA}),{101:$VB,118:93,119:94},{30:[1,96],101:[2,120]},{101:[2,121]},o($VC,[2,180],{132:$VD,164:$VE,165:$VF,166:$VG}),{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:101,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:102,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($VH,[2,176]),o($VH,$VI),o($VH,[2,178]),{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:103,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($VJ,[2,182]),o($VJ,[2,183]),o($VJ,[2,184]),o($VK,[2,197],{174:[1,104]}),{26:[1,105]},o($VJ,[2,185],{168:106,169:[1,107],184:$Vv}),o($VL,[2,192]),o($VL,[2,193]),o($VL,[2,194]),o([5,10,14,28,30,54,56,78,101,102,130,132,138,140,141,142,151,153,154,156,158,164,165,166,169,184],[2,216]),o($VM,[2,103],{122:108,123:109,33:110,173:$VN}),{173:[1,112]},{5:[2,6]},{5:[2,219]},{5:[2,9],14:$VO,18:113,19:114,20:115,21:116,22:117,23:118,56:$VP},o($VQ,[2,218]),{26:$VR,52:123,66:$VS,76:121,129:122},o($VT,$VU,{113:64,167:66,127:68,42:69,168:73,45:127,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,10:$VV,26:$VW,43:$Vm,82:$Vn,103:[1,126],163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),{5:[2,86]},o($VY,[2,113]),{5:[2,87],30:$VZ},o($V_,[2,109]),o($V_,[2,111]),{52:144,66:$VS,109:142,110:[1,143]},{33:146,47:145,173:$VN},{5:[2,97]},o([5,138,140],$Vy,{128:87,105:148,102:$V$,107:[1,147]}),{25:152,135:150,136:151,173:$Vh},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:153,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:154,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:155,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:156,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:157,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($VH,[2,174]),o($VH,[2,175]),{28:$V01,132:$VD,164:$VE,165:$VF,166:$VG},{173:[1,159]},{26:$Vl,42:69,43:$Vm,62:[1,162],82:$Vn,84:65,113:64,120:[1,161],125:163,127:68,132:[1,160],164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($VJ,[2,186]),{168:164,184:$Vv},{5:$Vy,30:[1,167],102:[1,165],105:166,128:87},o($VM,[2,104]),{124:[1,168]},o([28,30,124,175,176,177,178,179,180,181,182],[2,214]),o($Vw,[2,196]),{5:[2,8]},{5:[2,10],14:$VO,20:169,21:116,22:117,23:118,56:$VP},o($V11,[2,11]),o($V11,[2,13]),o($V11,[2,14]),o($V11,[2,15]),{24:[1,170],49:[1,171]},{46:$V21,57:172,62:[1,173],64:174,65:175,66:$V31,67:$V41,68:$V51,69:$V61},{5:[2,63],77:181,78:[1,183],130:$V71},o($V81,[2,114]),o($V81,[2,117]),{26:$VR,52:123,66:$VS,76:184,129:122},o($Vd,$Ve,{116:185,62:$Vf,120:$Vg}),{104:[1,186]},o($VY,[2,128],{141:$V91,142:$Va1}),o($Vb1,$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,45:189,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o($Vc1,$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,84:139,45:190,125:191,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o($Vb1,[2,140]),o($Vb1,[2,141]),o($Vb1,[2,142]),o($Vb1,[2,143]),o($Vb1,[2,144]),o($Vb1,[2,145]),o($Vb1,[2,146]),o($Vb1,[2,147]),{10:$Vd1,132:$VD,151:$Ve1,153:$Vf1,154:$Vg1,158:$Vh1,164:$VE,165:$VF,166:$VG},o([10,28,132,151,153,154,158,164,165,166],$VI,{157:[1,197]}),{26:$Vi1,152:198},{126:200,127:90,168:73,184:$Vv},{5:[2,88]},{26:[1,201]},{5:[2,90]},{28:[1,202],30:$Vj1},o($Vk1,[2,38]),{108:204,126:89,127:90,168:73,184:$Vv},o($Vl1,[2,129],{133:205,138:[1,206]}),o($Vb1,$VU,{113:64,167:66,127:68,42:69,168:73,45:127,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o([5,14,28,54,56,78,102,107,130,138,140],[2,123],{30:[1,207]}),o($Vm1,[2,124]),o($Vm1,[2,126],{137:208,173:[1,209]}),o($VC,[2,181],{132:$VD,164:$VE,165:$VF,166:$VG}),o($Vn1,[2,170],{132:$VD,166:$VG}),o($Vn1,[2,171],{132:$VD,166:$VG}),o($VH,[2,172]),o($VH,[2,173]),o($VH,[2,179]),o($VK,[2,198],{174:[1,210]}),{28:[1,211]},{84:212,173:$Vu},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:213,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{28:[1,214],132:$VD,164:$VE,165:$VF,166:$VG},o($VJ,[2,187]),o($VT,$VU,{113:64,167:66,127:68,42:69,168:73,45:127,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,10:$VV,26:$VW,43:$Vm,82:$Vn,103:[1,215],163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),{5:[2,108]},{33:110,123:216,173:$VN},{26:$Vl,37:[1,218],42:69,43:$Vm,82:$Vn,84:65,113:64,125:217,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($V11,[2,12]),{25:219,173:$Vh},{25:220,173:$Vh},{58:[1,221]},{58:[2,49],63:[1,222]},{30:[1,223],58:[2,50]},o($Vo1,[2,51]),o($Vo1,[2,53]),o($Vo1,[2,54]),o($Vo1,[2,55]),o($Vo1,$Vz,{50:224,26:$VA}),o($Vo1,$Vz,{50:225,26:$VA}),{5:[2,62]},{26:$VR,52:123,62:[1,227],66:$VS,129:226},{79:[1,228]},{28:[1,229],130:$V71},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,117:230,125:61,127:68,131:59,132:$Vo,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{73:231,173:$Vc},o($Vb1,$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,45:232,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o($Vb1,$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,45:233,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o($Vb1,[2,138]),{28:[1,234],141:$V91,142:$Va1},{10:$Vd1,28:$V01,132:$VD,151:$Ve1,153:$Vf1,154:$Vg1,158:$Vh1,164:$VE,165:$VF,166:$VG},{26:[1,238],42:69,43:$Vm,62:[1,240],82:$Vn,84:65,113:64,125:235,127:68,152:236,160:237,161:[1,239],162:[1,241],164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{153:[1,242],154:[1,243],158:[1,244]},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:245,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{42:69,43:$Vm,82:$Vn,113:246,127:68,168:73,171:$Vs,172:$Vt,184:$Vv},{26:[1,247]},{10:[1,248],37:[1,249]},o($Vb1,[2,168]),{66:$Vp1},o($V_,[2,110]),{37:$Vq1,42:69,43:$Vm,82:$Vn,111:251,112:252,113:253,127:68,168:73,171:$Vs,172:$Vt,184:$Vv},o([30,51,58,66,110],[2,44]),{33:255,173:$VN},{30:$VZ,101:$VB,118:256,119:257},o($Vr1,[2,133],{134:258,140:[1,259]}),{79:[1,260]},{25:152,136:261,173:$Vh},o($Vm1,[2,127]),o($Vm1,[2,217]),{173:[1,262]},o($VH,[2,188]),{28:[1,263]},{28:[1,264],132:$VD,164:$VE,165:$VF,166:$VG},o($VH,[2,191]),{104:[1,265]},o($VM,[2,105]),o($VM,[2,106],{132:$VD,164:$VE,165:$VF,166:$VG}),o($VM,[2,107]),{26:[1,266]},{26:$VA,50:267,51:$Vz},{25:268,173:$Vh},{58:[2,48]},{46:$V21,65:269,66:$V31,67:$V41,68:$V51,69:$V61},o($Vo1,[2,56]),o($Vo1,[2,57]),o($V81,[2,115]),{26:$VR,52:123,66:$VS,129:270},{80:271,81:272,82:$Vs1,84:274,173:$Vu},o($V81,[2,118]),{101:$VB,118:275,119:257},{5:[2,85]},o([5,14,28,54,56,78,130,138,140,141],[2,136],{142:$Va1}),o($Vb1,[2,137]),o($Vb1,[2,139]),o($Vb1,[2,148],{132:$VD,164:$VE,165:$VF,166:$VG}),o($Vb1,[2,149]),{26:$Vi1,152:276},{26:$Vl,42:69,43:$Vm,66:$Vp1,82:$Vn,84:65,113:64,125:103,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{26:[2,165]},{26:[2,166]},{26:[2,167]},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:277,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{42:69,43:$Vm,82:$Vn,113:278,127:68,168:73,171:$Vs,172:$Vt,184:$Vv},{26:[1,279]},{132:$VD,142:[1,280],164:$VE,165:$VF,166:$VG},o($Vb1,$Vt1,{155:281,156:$Vu1}),{26:$Vi1,42:69,43:$Vm,82:$Vn,113:285,127:68,152:283,159:284,168:73,171:$Vs,172:$Vt,184:$Vv},{37:[1,286]},o($Vb1,[2,157]),o($Vd,$Ve,{116:287,62:$Vf,120:$Vg}),{28:[1,288],30:[1,289]},o($Vk1,[2,91]),o($Vk1,[2,93]),o($Vk1,[2,94]),o($Vk1,[2,39]),{5:[2,98]},o($VY,$Vy,{128:87,105:148,102:$V$}),o($Vr1,[2,122]),o([5,14,28,54,56,78,130,141,142],$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,45:290,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),{84:292,139:291,173:$Vu},o($Vm1,[2,125]),o($VK,[2,199]),o($VH,[2,189]),o($VH,[2,190]),{73:293,173:$Vc},{27:294,29:295,31:296,32:297,33:298,38:$Vv1,39:$Vw1,44:$Vx1,48:$Vy1,173:$VN},{51:[1,303]},{59:[1,304]},o($Vo1,[2,52]),o($V81,[2,116]),{5:[2,64],30:[1,305]},o($Vz1,[2,65]),o($Vz1,$VA1,{83:306,85:$VB1,86:$VC1}),o($Vz1,$VA1,{83:309,85:$VB1,86:$VC1}),o($Vr1,[2,119]),o($Vb1,[2,164]),{132:$VD,142:[1,310],164:$VE,165:$VF,166:$VG},o($Vb1,$Vt1,{155:311,156:$Vu1}),{26:$Vi1,42:69,43:$Vm,82:$Vn,113:285,127:68,152:312,159:313,168:73,171:$Vs,172:$Vt,184:$Vv},{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:314,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($Vb1,[2,153]),{42:69,43:$Vm,82:$Vn,113:315,127:68,168:73,171:$Vs,172:$Vt,184:$Vv},{28:[1,316]},{28:[1,317],30:$VD1},o($Vk1,[2,162]),o($Vb1,[2,156]),{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,117:319,125:61,127:68,131:59,132:$Vo,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},{5:[2,89]},{37:$Vq1,42:69,43:$Vm,82:$Vn,112:320,113:253,127:68,168:73,171:$Vs,172:$Vt,184:$Vv},o($Vr1,[2,134],{141:$V91,142:$Va1}),o($Vl1,[2,130],{30:[1,321]}),o($VE1,[2,131]),{5:[2,102]},{28:[1,322],30:[1,323]},o($Vk1,[2,17]),o($Vk1,[2,19]),o($Vk1,[2,20]),{34:324,175:[1,325],176:[1,326],177:[1,327],178:[1,328],179:[1,329],180:[1,330],181:[1,331],182:[1,332]},{26:[1,333]},{40:[1,334]},{40:[1,335]},{26:[1,336]},{52:337,66:$VS},{17:341,60:338,70:339,71:$VF1,173:$Vx},{81:342,82:$Vs1,84:274,173:$Vu},o($Vz1,[2,67]),o($Vz1,[2,70]),o($Vz1,[2,71]),o($Vz1,[2,68]),{26:$Vl,42:69,43:$Vm,82:$Vn,84:65,113:64,125:343,127:68,164:$Vp,165:$Vq,167:66,168:73,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv},o($Vb1,[2,152]),{28:[1,344]},{28:[1,345],30:$VD1},o($Vb1,[2,151],{132:$VD,164:$VE,165:$VF,166:$VG}),o($Vb1,[2,155]),o($Vb1,[2,159]),o($Vb1,[2,161]),{42:69,43:$Vm,82:$Vn,113:346,127:68,168:73,171:$Vs,172:$Vt,184:$Vv},{101:$VB,118:347,119:257},o($Vk1,[2,92]),{84:348,173:$Vu},o($V11,[2,16]),{29:349,31:296,32:297,33:298,38:$Vv1,39:$Vw1,44:$Vx1,48:$Vy1,173:$VN},o($VG1,[2,22],{35:350}),o($VG1,[2,200],{26:[1,351]}),o($VG1,[2,202],{26:[1,352]}),o($VG1,[2,205],{26:[1,353]}),o($VG1,[2,208]),o($VG1,[2,209]),o($VG1,[2,210],{26:[1,354]}),o($VG1,[2,212]),{183:[1,355]},{33:146,47:356,173:$VN},{26:[1,357]},{26:[1,358]},o($Vc1,$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,45:359,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o($V11,[2,41],{53:360,54:[1,361]}),o($V11,[2,46],{61:362,30:[1,363],54:[1,364]}),o($VQ,[2,58]),o($VQ,[2,60]),o($VQ,[2,61]),o($Vz1,[2,66]),o($Vb1,[2,150],{132:$VD,164:$VE,165:$VF,166:$VG}),o($Vb1,[2,158]),o($Vb1,[2,160]),o($Vk1,[2,163]),{28:[1,365]},o($VE1,[2,132]),o($Vk1,[2,18]),o($Vk1,[2,21],{36:366,10:[1,367],41:[1,368],44:[1,369],46:[1,370]}),{82:[1,371]},{82:[1,372]},{82:[1,373]},{82:[1,374]},o($VG1,[2,213]),{28:[1,375],30:$Vj1},{33:146,47:376,173:$VN},{33:146,47:377,173:$VN},{28:[1,378],141:$V91,142:$Va1},o($V11,[2,40]),{44:[1,379]},o($V11,[2,45]),{17:341,70:380,71:$VF1,173:$Vx},{56:[1,381]},o($Vb1,[2,169]),o($VG1,[2,23]),{37:[1,382]},{37:[1,384],42:383,43:[1,385],82:$Vn,171:$Vs,172:$Vt},{26:[1,386]},{25:387,173:$Vh},{28:[1,388]},{28:[1,389],30:[1,390]},{28:[1,391],30:[1,392]},{28:[1,393]},o($Vk1,[2,33]),{28:[1,394],30:$Vj1},{28:[1,395],30:$Vj1},o($Vk1,[2,37]),{55:[1,396]},o($VQ,[2,59]),{55:[1,397]},o($VG1,[2,24],{38:[1,398],39:[1,399]}),o($VG1,[2,27]),o($VG1,[2,28]),o($VG1,[2,29]),o($Vc1,$VU,{113:64,167:66,127:68,42:69,168:73,143:130,144:131,145:132,146:133,147:134,148:135,149:136,150:137,125:138,84:139,45:400,10:$VV,26:$VW,43:$Vm,82:$Vn,163:$VX,164:$Vp,165:$Vq,170:$Vr,171:$Vs,172:$Vt,173:$Vu,184:$Vv}),o($VG1,[2,31],{26:[1,401]}),o($VG1,[2,201]),o($VG1,[2,203]),{82:[1,402]},o($VG1,[2,206]),{82:[1,403]},o($VG1,[2,211]),o($Vk1,[2,34]),{46:[1,404]},o($V11,[2,42]),o($V11,[2,47]),o($VG1,[2,25]),{40:[1,405]},{28:[1,406],141:$V91,142:$Va1},{33:146,47:407,173:$VN},{28:[1,408]},{28:[1,409]},{25:410,173:$Vh},o($VG1,[2,26]),o($VG1,[2,30]),{28:[1,411],30:$Vj1},o($VG1,[2,204]),o($VG1,[2,207]),o($Vk1,[2,35],{26:[1,412]}),o($VG1,[2,32]),{33:146,47:413,173:$VN},{28:[1,414],30:$Vj1},o($Vk1,[2,36])],
defaultActions: {3:[2,3],4:[2,4],5:[2,5],9:[2,72],10:[2,73],11:[2,74],12:[2,75],13:[2,76],14:[2,77],15:[2,78],16:[2,79],17:[2,80],18:[2,81],19:[2,82],36:[2,83],37:[2,84],41:[2,95],42:[2,96],50:[2,7],52:[2,220],60:[2,121],80:[2,6],81:[2,219],86:[2,86],93:[2,97],113:[2,8],142:[2,88],144:[2,90],166:[2,108],181:[2,62],222:[2,48],231:[2,85],239:[2,165],240:[2,166],241:[2,167],256:[2,98],288:[2,89],293:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'ADA';
break;
case 1:return 62;
break;
case 2:return 142;
break;
case 3:return 170;
break;
case 4:return 170;
break;
case 5:return 170;
break;
case 6:return 170;
break;
case 7:return 170;
break;
case 8:return 161;
break;
case 9:return 51;
break;
case 10:return 85;
break;
case 11:return 16;
break;
case 12:return 153;
break;
case 13:return 79;
break;
case 14:return 'C';
break;
case 15:return 175;
break;
case 16:return 44;
break;
case 17:return 98;
break;
case 18:return 'COBOL';
break;
case 19:return 99;
break;
case 20:return 186;
break;
case 21:return 14;
break;
case 22:return 103;
break;
case 23:return 74;
break;
case 24:return 177;
break;
case 25:return 72;
break;
case 26:return 41;
break;
case 27:return 68;
break;
case 28:return 86;
break;
case 29:return 120;
break;
case 30:return 182;
break;
case 31:return 156;
break;
case 32:return 163;
break;
case 33:return 106;
break;
case 34:return 180;
break;
case 35:return 75;
break;
case 36:return 48;
break;
case 37:return 'FORTRAN';
break;
case 38:return 11;
break;
case 39:return 101;
break;
case 40:return 185;
break;
case 41:return 56;
break;
case 42:return 138;
break;
case 43:return 140;
break;
case 44:return 158;
break;
case 45:return 169;
break;
case 46:return 67;
break;
case 47:return 178;
break;
case 48:return 107;
break;
case 49:return 157;
break;
case 50:return 40;
break;
case 51:return 'LANGUAGE';
break;
case 52:return 154;
break;
case 53:return 'MODULE';
break;
case 54:return 10;
break;
case 55:return 37;
break;
case 56:return 176;
break;
case 57:return 104;
break;
case 58:return 58;
break;
case 59:return 114;
break;
case 60:return 55;
break;
case 61:return 141;
break;
case 62:return 78;
break;
case 63:return 'PASCAL';
break;
case 64:return 'PLI';
break;
case 65:return 183;
break;
case 66:return 39;
break;
case 67:return 63;
break;
case 68:return 'PROCEDURE';
break;
case 69:return 71;
break;
case 70:return 181;
break;
case 71:return 46;
break;
case 72:return 115;
break;
case 73:return 15;
break;
case 74:return 66;
break;
case 75:return 121;
break;
case 76:return 179;
break;
case 77:return 162;
break;
case 78:return 'SQLCODE';
break;
case 79:return 24;
break;
case 80:return 59;
break;
case 81:return 130;
break;
case 82:return 38;
break;
case 83:return 69;
break;
case 84:return 43;
break;
case 85:return 110;
break;
case 86:return 49;
break;
case 87:return 9;
break;
case 88:return 102;
break;
case 89:return 54;
break;
case 90:return 100;
break;
case 91:/* ignore white spaces */
break;
case 92:/* ignore comments */
break;
case 93:return 132;
break;
case 94:return 5;
break;
case 95:return 151;
break;
case 96:return 173;
break;
case 97:return 82;
break;
case 98:return 172;
break;
case 99:return 171;
break;
}
},
rules: [/^(?:ADA\b)/,/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:AVG\b)/,/^(?:MIN\b)/,/^(?:MAX\b)/,/^(?:SUM\b)/,/^(?:COUNT\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BY\b)/,/^(?:C\b)/,/^(?:CHAR\(ACTE\)\?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COBOL\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:ESCAPE\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FORTRAN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:GO\[ \\t\]\*TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INSERT\b)/,/^(?:INT\(EGE\)\?)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:MODULE\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:PASCAL\b)/,/^(?:PLI\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UNIQUE\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:([ \t\r]+))/,/^(?:(--.*$))/,/^(?:(\*))/,/^(?:(;))/,/^(?:(=|<>|<|>|<=|>=))/,/^(?:([A-Za-z][A-Za-z0-9_])+)/,/^(?:([0-9]+|[0-9]+\.[0-9]*|\.[0-9]*))/,/^(?:([0-9]+[eE][+-]?[0-9]+|[0-9]+\.[0-9]*[eE][+-]?[0-9]+|\.[0-9]*[eE][+-]?[0-9]+))/,/^(?:(\[\^'\\n\]\*)+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sql;
exports.Parser = sql.Parser;
exports.parse = function () { return sql.parse.apply(sql, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}