/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sql2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,41],$V1=[1,40],$V2=[1,42],$V3=[23,24],$V4=[62,70],$V5=[1,4],$V6=[1,52],$V7=[19,33,36],$V8=[33,36],$V9=[4,17,19,27,33,36,41,52],$Va=[4,17,19,27,33,36,41,52,72],$Vb=[2,62],$Vc=[1,90],$Vd=[1,91],$Ve=[1,92],$Vf=[1,95],$Vg=[4,52],$Vh=[1,101],$Vi=[1,107],$Vj=[1,106],$Vk=[4,36,52],$Vl=[4,36],$Vm=[1,122],$Vn=[19,36],$Vo=[4,19,36,52,55,56],$Vp=[4,55,56],$Vq=[4,36,52,55,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"sql":3,";":4,"statements":5,"ddl":6,"dml":7,"create_statement":8,"alter_statement":9,"select_statement":10,"insert_statement":11,"update_statement":12,"delete_statement":13,"create_keyword":14,"create_target":15,"simple_name_identifier":16,"(":17,"multi_identifier":18,")":19,"CREATE":20,"DEFINE":21,"DECLARE":22,"TABLE":23,"SCHEMA":24,"alter_keyword":25,"alter_target":26,"SET":27,"multi_expression":28,"ALTER":29,"CHANGE":30,"SELECT":31,"select_params":32,"FROM":33,"select_target":34,"condition_clause":35,",":36,"multi_function":37,"identifier":38,"insert_keyword":39,"insert_target":40,"VALUES":41,"multi_literal":42,"INSERT":43,"INTO":44,"update_keyword":45,"update_target":46,"expression":47,"UPDATE":48,"delete_keyword":49,"delete_target":50,"DELETE":51,"WHERE":52,"condition_part":53,"binary_expression":54,"AND":55,"OR":56,"unary_expression":57,"=":58,"literal":59,"COMPARISON":60,"NOT":61,"NAME":62,"!":63,"-":64,"function":65,"AMMSC":66,"AS":67,"ddl_identifier":68,"dml_identifier":69,"*":70,"alias_identifier":71,".":72,"type":73,"sized_type":74,"INTNUM":75,"INTEGER":76,"DOUBLE":77,"FLOAT":78,"DATETIME":79,"VARCHAR":80,"CHARACTER":81,"STRING":82,"$accept":0,"$end":1},
terminals_: {2:"error",4:";",17:"(",19:")",20:"CREATE",21:"DEFINE",22:"DECLARE",23:"TABLE",24:"SCHEMA",27:"SET",29:"ALTER",30:"CHANGE",31:"SELECT",33:"FROM",36:",",41:"VALUES",43:"INSERT",44:"INTO",48:"UPDATE",51:"DELETE",52:"WHERE",55:"AND",56:"OR",58:"=",60:"COMPARISON",61:"NOT",62:"NAME",63:"!",64:"-",66:"AMMSC",67:"AS",70:"*",72:".",75:"INTNUM",76:"INTEGER",77:"DOUBLE",78:"FLOAT",79:"DATETIME",80:"VARCHAR",81:"CHARACTER",82:"STRING"},
productions_: [0,[3,2],[3,2],[5,1],[5,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[14,1],[14,1],[14,1],[15,1],[15,1],[9,5],[25,1],[25,1],[26,1],[26,1],[10,4],[10,5],[32,3],[32,3],[32,1],[32,1],[34,1],[11,6],[11,9],[39,1],[39,2],[40,1],[12,4],[12,5],[45,1],[46,1],[13,3],[13,4],[49,1],[50,1],[35,2],[53,1],[53,3],[53,3],[47,1],[47,1],[54,3],[54,3],[57,2],[57,2],[57,2],[28,3],[28,1],[65,4],[65,6],[37,3],[37,1],[38,1],[38,1],[16,1],[69,1],[69,1],[69,3],[69,1],[71,3],[68,2],[68,5],[18,3],[18,1],[73,1],[73,1],[73,1],[73,1],[73,1],[74,1],[42,3],[42,1],[59,1],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:

            {
                yy.ast.setStatement($$[$0-1]);
            }
        
break;
case 11:

            {
                this.$ = new yy.scope.createStatement();
                this.$.setTarget($$[$0]);
            }
        
break;
case 12:

            {
                this.$ = new yy.scope.createStatement();
                this.$.setTarget($$[$0-3]);
                this.$.setColumns($$[$0-1]);
            }
        
break;
case 18:

            {
                this.$ = new yy.scope.alterStatement();
                this.$.setTarget($$[$0-2]);
                this.$.setExpressions($$[$0]);
            }
        
break;
case 23:
 
            {
                this.$ = new yy.scope.selectStatement();
                this.$.setColumns($$[$0-2]);
                this.$.setTarget($$[$0]);
            }
        
break;
case 24:
 
            {
                this.$ = new yy.scope.selectStatement();
                this.$.setColumns($$[$0-3]);
                this.$.setTarget($$[$0-1]);
                this.$.setWhere($$[$0]);
            }
        
break;
case 25: case 26:

            {
                for(const temp of $$[$0])
                    temp.setIndex(temp.index + $$[$0-2].length)
                this.$ = $$[$0-2].concat($$[$0]);
            }
        
break;
case 30:

            {
                this.$ = new yy.scope.insertStatement();
                this.$.setTarget($$[$0-4]);
                this.$.setValues($$[$0-1]);
            }
        
break;
case 31:

            {
                this.$ = new yy.scope.insertStatement();
                this.$.setTarget($$[$0-7]);
                this.$.setColumns($$[$0-5]);
                this.$.setValues($$[$0-1]);
            }
        
break;
case 35:

            {
                this.$ = new yy.scope.updateStatement();
                this.$.setTarget($$[$0-2]);
            }
        
break;
case 36:

            {
                this.$ = new yy.scope.updateStatement();
                this.$.setTarget($$[$0-3]);
                this.$.setWhere($$[$0]);
            }
        
break;
case 39:

            {
                this.$ = new yy.scope.deleteStatement();
                this.$.setTarget($$[$0]);
            }
        
break;
case 40:

            {
                this.$ = new yy.scope.deleteStatement();
                this.$.setTarget($$[$0-1]);
                this.$.setWhere($$[$0]);
            }
        
break;
case 43:

            {
                this.$ = $$[$0];
            }
        
break;
case 45: case 46: case 49: case 50:

            {
                this.$ = new yy.scope.binaryExpression({
                    lParam: $$[$0-2], rParam: $$[$0], operator: $$[$0-1]
                });
            }
        
break;
case 54: case 78:

            {
                this.$ = Array.isArray($$[$0-2]) ? $$[$0-2] : [$$[$0-2]];
                this.$.push($$[$0]);
            }
        
break;
case 56:

            {
                this.$ = new yy.scope.ammsc({ name: $$[$0-3], params: $$[$0-1] }); 
            }
        
break;
case 57:

            {
                this.$ = new yy.scope.ammsc({ name: $$[$0-5], params: $$[$0-3], alias: $$[$0] }); 
            }
        
break;
case 58: case 70:

            {
                this.$ = Array.isArray($$[$0-2]) ? $$[$0-2] : [$$[$0-2]];
                $$[$0].setIndex(this.$.length || 0);
                this.$.push($$[$0]);
            }
        
break;
case 59: case 71:

            {
                this.$ = [$$[$0]];
            }
        
break;
case 62:

            {
                this.$ = new yy.scope.identifier({ name: $$[$0] });
            }
        
break;
case 63:

            {
                this.$ = new yy.scope.identifier({ name: 'all', alias: '*' });
            }
        
break;
case 65:

            {
                this.$ = new yy.scope.identifier({ name: $$[$0], scope: $$[$0-2] })
            }
        
break;
case 67:

            {
                this.$ = new yy.scope.identifier({ name: $$[$0-2], alias: $$[$0] });
            }
        
break;
case 68:

            {
                this.$ = new yy.scope.typedIdentifier({ name: $$[$0-1], type: $$[$0] })
            }
        
break;
case 69:

            {
                this.$ = new yy.scope.typedIdentifier({ name: $$[$0-4], type: $$[$0-3], size: $$[$0-1] })
            }
        
break;
case 80:

            {
                this.$ = new yy.scope.literal($$[$0].substring(1, $$[$0].length - 1));
            }
        
break;
case 81:

            {
                this.$ = new yy.scope.literal($$[$0]);
            }
        
break;
}
},
table: [{3:1,5:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,20:[1,17],21:[1,18],22:[1,19],25:12,29:[1,20],30:[1,21],31:[1,13],39:14,43:[1,22],45:15,48:[1,23],49:16,51:[1,24]},{1:[3],4:[1,25]},{4:[1,26]},{4:[2,3]},{4:[2,4]},{4:[2,5]},{4:[2,6]},{4:[2,7]},{4:[2,8]},{4:[2,9]},{4:[2,10]},{15:27,23:[1,28],24:[1,29]},{23:[1,31],24:[1,32],26:30},{16:44,18:34,32:33,37:35,38:36,62:$V0,65:37,66:$V1,68:38,69:39,70:$V2,71:43},{16:44,38:46,40:45,62:$V0,68:38,69:39,70:$V2,71:43},{16:44,38:48,46:47,62:$V0,68:38,69:39,70:$V2,71:43},{33:[1,49]},o($V3,[2,13]),o($V3,[2,14]),o($V3,[2,15]),o($V3,[2,19]),o($V3,[2,20]),o($V4,[2,32],{44:[1,50]}),o($V4,[2,37]),{33:[2,41]},o($V5,[2,1]),o($V5,[2,2]),{16:51,62:$V6},{62:[2,16]},{62:[2,17]},{16:53,62:$V6},{62:[2,21]},{62:[2,22]},{33:[1,54]},{33:[2,27],36:[1,55]},{33:[2,28],36:[1,56]},o($V7,[2,71]),o($V8,[2,59]),o($V9,[2,60]),o($V9,[2,61],{72:[1,57]}),{17:[1,58]},o($Va,$Vb,{73:59,74:60,67:[1,61],76:[1,62],77:[1,63],78:[1,64],79:[1,65],80:[1,66],81:[1,67]}),o($Va,[2,63]),o($Va,[2,64]),o($Va,[2,66]),{17:[1,69],41:[1,68]},o([17,41],[2,34]),{27:[1,70]},{27:[2,38]},{16:44,38:72,50:71,62:$V0,68:38,69:39,70:$V2,71:43},o($V4,[2,33]),{4:[2,11],17:[1,73]},o([4,17,19,27,33,36,41,52,58,60,72],$Vb),{27:[1,74]},{16:44,34:75,38:76,62:$V0,68:38,69:39,70:$V2,71:43},{16:44,37:77,38:78,62:$V0,65:37,66:$V1,68:38,69:39,70:$V2,71:43},{16:44,18:79,38:36,62:$V0,65:80,66:$V1,68:38,69:39,70:$V2,71:43},{16:81,62:$V6},{16:44,18:82,38:36,62:$V0,68:38,69:39,70:$V2,71:43},o($V9,[2,68]),{17:[1,83]},{62:[1,84]},o($V9,[2,72]),o($V9,[2,73]),o($V9,[2,74]),o($V9,[2,75]),o($V9,[2,76]),{17:[2,77]},{17:[1,85]},{16:44,18:86,38:36,62:$V0,68:38,69:39,70:$V2,71:43},{16:93,47:87,54:89,57:88,61:$Vc,62:$V6,63:$Vd,64:$Ve},{4:[2,39],35:94,52:$Vf},o($Vg,[2,42]),{16:44,18:96,38:36,62:$V0,68:38,69:39,70:$V2,71:43},{16:93,28:97,47:98,54:89,57:88,61:$Vc,62:$V6,63:$Vd,64:$Ve},{4:[2,23],35:99,52:$Vf},o($Vg,[2,29]),{33:[2,25],36:[1,100]},o($V7,[2,70]),{33:[2,26],36:$Vh},o($V8,[2,58]),o($Va,[2,65]),{19:[1,102],36:$Vh},{75:[1,103]},o($Va,[2,67]),{42:104,59:105,75:$Vi,82:$Vj},{19:[1,108],36:$Vh},{4:[2,35],35:109,52:$Vf},o($Vk,[2,47]),o($Vk,[2,48]),{62:[1,110]},{62:[1,111]},{62:[1,112]},{58:[1,113],60:[1,114]},{4:[2,40]},{16:93,53:115,54:116,62:$V6},{19:[1,117],36:$Vh},{4:[2,18],36:[1,118]},o($Vl,[2,55]),{4:[2,24]},{65:80,66:$V1},{16:44,38:78,62:$V0,68:38,69:39,70:$V2,71:43},o($V8,[2,56],{67:[1,119]}),{19:[1,120]},{19:[1,121],36:$Vm},o($Vn,[2,79]),o($Vo,[2,80]),o($Vo,[2,81]),{41:[1,123]},{4:[2,36]},o($Vk,[2,51]),o($Vk,[2,52]),o($Vk,[2,53]),{59:124,75:$Vi,82:$Vj},{59:125,75:$Vi,82:$Vj},{4:[2,43],55:[1,126],56:[1,127]},o($Vp,[2,44]),{4:[2,12]},{16:93,47:128,54:89,57:88,61:$Vc,62:$V6,63:$Vd,64:$Ve},{62:[1,129]},o($V9,[2,69]),{4:[2,30]},{59:130,75:$Vi,82:$Vj},{17:[1,131]},o($Vq,[2,49]),o($Vq,[2,50]),{16:93,54:132,62:$V6},{16:93,54:133,62:$V6},o($Vl,[2,54]),o($V8,[2,57]),o($Vn,[2,78]),{42:134,59:105,75:$Vi,82:$Vj},o($Vp,[2,45]),o($Vp,[2,46]),{19:[1,135],36:$Vm},{4:[2,31]}],
defaultActions: {3:[2,3],4:[2,4],5:[2,5],6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],24:[2,41],28:[2,16],29:[2,17],31:[2,21],32:[2,22],48:[2,38],67:[2,77],94:[2,40],99:[2,24],109:[2,36],117:[2,12],121:[2,30],135:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 66;
break;
case 1:return 66;
break;
case 2:return 66;
break;
case 3:return 66;
break;
case 4:return 66;
break;
case 5:return 55;
break;
case 6:return 56;
break;
case 7:return 'BETWEEN';
break;
case 8:return 61;
break;
case 9:return 27;
break;
case 10:return 'ASC';
break;
case 11:return 'DESC';
break;
case 12:return 'ORDER';
break;
case 13:return 'GROUP';
break;
case 14:return 'BY';
break;
case 15:return 'SMALLINT';
break;
case 16:return 76;
break;
case 17:return 78;
break;
case 18:return 77;
break;
case 19:return 81;
break;
case 20:return 80;
break;
case 21:return 20;
break;
case 22:return 79;
break;
case 23:return 'TIME';
break;
case 24:return 43;
break;
case 25:return 31;
break;
case 26:return 48;
break;
case 27:return 51;
break;
case 28:return 52;
break;
case 29:return 'DISTINCT';
break;
case 30:return 'HAVING';
break;
case 31:return 24;
break;
case 32:return 23;
break;
case 33:return 41;
break;
case 34:return 33;
break;
case 35:return 44;
break;
case 36:return 67;
break;
case 37:return 'TO';
break;
case 38:/* ignore white spaces */
break;
case 39:/* ignore comments */
break;
case 40:return 60;
break;
case 41:return yy_.yytext;
break;
case 42:return 62;
break;
case 43:return 75;
break;
case 44:return 'APPROXNUM';
break;
case 45:return 82;
break;
}
},
rules: [/^(?:AVG\b)/,/^(?:MIN\b)/,/^(?:MAX\b)/,/^(?:SUM\b)/,/^(?:COUNT\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:BETWEEN\b)/,/^(?:NOT\b)/,/^(?:SET\b)/,/^(?:ASC\b)/,/^(?:DESC\b)/,/^(?:ORDER\b)/,/^(?:GROUP\b)/,/^(?:BY\b)/,/^(?:SMALLINT\b)/,/^(?:INTEGER\b)/,/^(?:FLOAT\b)/,/^(?:DOUBLE\b)/,/^(?:CHARACTER\b)/,/^(?:VARCHAR\b)/,/^(?:CREATE\b)/,/^(?:DATETIME\b)/,/^(?:TIME\b)/,/^(?:INSERT\b)/,/^(?:SELECT\b)/,/^(?:UPDATE\b)/,/^(?:DELETE\b)/,/^(?:WHERE\b)/,/^(?:DISTINCT\b)/,/^(?:HAVING\b)/,/^(?:SCHEMA\b)/,/^(?:TABLE\b)/,/^(?:VALUES\b)/,/^(?:FROM\b)/,/^(?:INTO\b)/,/^(?:AS\b)/,/^(?:TO\b)/,/^(?:([ \t\r\n]+))/,/^(?:(--.*$))/,/^(?:(==|<>|<|>|<=|>=))/,/^(?:(\*|,|;|\.|\(|\)|=))/,/^(?:([A-Za-z][A-Za-z0-9_]*)+)/,/^(?:([0-9]+|[0-9]+\.[0-9]*|\.[0-9]*))/,/^(?:([0-9]+[eE][+-]?[0-9]+|[0-9]+\.[0-9]*[eE][+-]?[0-9]+|\.[0-9]*[eE][+-]?[0-9]+))/,/^(?:(['\w'])+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sql2;
exports.Parser = sql2.Parser;
exports.parse = function () { return sql2.parse.apply(sql2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}